[{"/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/index.js":"1","/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/components/HomePage.js":"2","/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/actions/types.js":"3","/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/reducers/stateReducer.js":"4","/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/store.js":"5","/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/components/QuestionBlock.js":"6","/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/reducers/index.js":"7","/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/images/logo.js":"8","/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/actions/blockActions.js":"9","/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/actions/stateActions.js":"10","/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/components/ReviewBlock.js":"11","/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/reducers/blockReducer.js":"12","/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/App.js":"13","/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/components/ExportPage.js":"14","/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/reducers/exportReducer.js":"15","/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/actions/exportActions.js":"16","/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/components/ExportModal.js":"17","/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/components/ExportModalContent.js":"18"},{"size":2166,"mtime":1611531209509,"results":"19","hashOfConfig":"20"},{"size":5614,"mtime":1611538172009,"results":"21","hashOfConfig":"20"},{"size":764,"mtime":1611530749256,"results":"22","hashOfConfig":"20"},{"size":1939,"mtime":1611538112054,"results":"23","hashOfConfig":"20"},{"size":405,"mtime":1609705430726,"results":"24","hashOfConfig":"20"},{"size":12314,"mtime":1611010377797,"results":"25","hashOfConfig":"20"},{"size":551,"mtime":1611537997877,"results":"26","hashOfConfig":"20"},{"size":109284,"mtime":1610150738198,"results":"27","hashOfConfig":"20"},{"size":1371,"mtime":1611444911080,"results":"28","hashOfConfig":"20"},{"size":681,"mtime":1611530799860,"results":"29","hashOfConfig":"20"},{"size":7535,"mtime":1611538324242,"results":"30","hashOfConfig":"20"},{"size":7804,"mtime":1611538101857,"results":"31","hashOfConfig":"20"},{"size":4431,"mtime":1611536409824,"results":"32","hashOfConfig":"20"},{"size":5244,"mtime":1611015161609,"results":"33","hashOfConfig":"20"},{"size":974,"mtime":1610922297644,"results":"34","hashOfConfig":"20"},{"size":379,"mtime":1610922143150,"results":"35","hashOfConfig":"20"},{"size":5174,"mtime":1611539718307,"results":"36","hashOfConfig":"20"},{"size":3695,"mtime":1611531087611,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"1m62ta2",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"46"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},"/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/index.js",[],["83","84"],"/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/components/HomePage.js",[],["85","86"],"/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/actions/types.js",[],["87","88"],"/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/reducers/stateReducer.js",[],"/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/store.js",[],"/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/components/QuestionBlock.js",["89","90"],"import React, { Fragment } from 'react';\nimport { connect } from 'react-redux';\n\nimport {\n  Container,\n  Header,\n  Grid,\n  Segment,\n  Dropdown,\n  Progress,\n  Image,\n  Modal,\n  Icon,\n  Button,\n} from 'semantic-ui-react';\n\nimport { Link, useHistory } from 'react-router-dom';\n\nimport 'semantic-ui-css/semantic.min.css';\nimport './components.css';\n\nimport {\n  blockAction,\n  dropDownSelect,\n  updateFRAction,\n  nextBlockAction,\n  prevBlockAction,\n} from '../actions/blockActions';\n\nimport { modalActions } from '../actions/stateActions';\n\nconst QuestionBlock = ({\n  blockAction,\n  dropDownSelect,\n  updateFRAction,\n  nextBlockAction,\n  prevBlockAction,\n  modalActions,\n  questions,\n  block_id,\n  blocks,\n  current_block,\n  blocks_seen,\n  ping,\n  cancelModalIsOpen,\n}) => {\n  // make sure we have questions to display - if not, redirect to home page\n  const history = useHistory();\n  if (blocks === undefined) {\n    history.push('/');\n    return <div>empty</div>;\n  }\n  // set current block & questions\n  current_block = blocks.find((b) => b.block_id === block_id);\n  questions = current_block.questions;\n\n  const isSelected = (value, option) => {\n    return (value, value.find((o) => o === option.value) !== undefined)\n      ? 'orange'\n      : 'black';\n  };\n\n  const dropdownChange = (event, { value }, qId) => {\n    // console.log(value, qId);\n    dropDownSelect(block_id, qId, value);\n  };\n\n  const getOptions = (options) => {\n    let ddOptions = [];\n    options.forEach((o) => {\n      ddOptions.push({ key: o.value, value: o.value, text: o.value });\n    });\n    return ddOptions;\n  };\n\n  const onTextChange = (qId, val) => {\n    // console.log(qId, val);\n    updateFRAction(block_id, qId, val);\n  };\n\n  const reviewEnabled = () => {\n    let unfinished = blocks.filter(\n      (b) => b.required && b.enabled && nextDisabled(b.block_id)\n    );\n    let curr_index = blocks.indexOf(\n      blocks.find((b) => b.block_id === block_id)\n    );\n\n    if (blocks_seen !== undefined) {\n      for (let i = curr_index; i < blocks.length; i++) {\n        const this_block = blocks[i];\n        if (this_block.enabled && !blocks_seen.includes(blocks[i].block_id)) {\n          return false;\n        }\n      }\n    }\n    return unfinished.length > 0 ? false : true;\n  };\n\n  const nextDisabled = (b_id = block_id) => {\n    let currBlock = blocks.find((b) => b.block_id === b_id);\n    let unfinished = currBlock.questions.filter(\n      (q) =>\n        q.required && q.enabled && (q.value === null || q.value.length === 0)\n    );\n    return unfinished === undefined || unfinished.length > 0 ? true : false;\n  };\n\n  const nextDisabledVar = nextDisabled();\n\n  const previousVisible = () => {\n    let check = blocks.indexOf(blocks.find((b) => b.block_id === block_id)) - 1;\n    while (check >= 0) {\n      if (blocks[check].enabled) {\n        return true;\n      }\n      check--;\n    }\n    return false;\n  };\n\n  const nextVisible = () => {\n    let check = blocks.indexOf(blocks.find((b) => b.block_id === block_id)) + 1;\n    while (check < blocks.length) {\n      if (blocks[check].enabled) {\n        return true;\n      }\n      check++;\n    }\n    return false;\n  };\n\n  const getProgress = () => {\n    const numEnabled = blocks.filter((b) => b.enabled);\n    let numCompleted = 1;\n    for (\n      let i = 0;\n      i < blocks.indexOf(blocks.find((b) => b.block_id === block_id));\n      i++\n    ) {\n      if (blocks[i].enabled) {\n        numCompleted++;\n      }\n    }\n    console.log(\n      'progress is',\n      Math.floor((numCompleted / numEnabled.length) * 100)\n    );\n    return Math.floor((numCompleted / numEnabled.length) * 100);\n  };\n\n  const nextBlockActionLocal = () => {\n    if (!nextDisabledVar) {\n      nextBlockAction();\n    } else {\n    }\n  };\n\n  const getDefaultValue = (type, val) => {\n    if (val === []) {\n      return [];\n    }\n    if (type === 'DDS') {\n      return val[0];\n    } else {\n      return val;\n    }\n  };\n\n  const setTodaysDate = (q_id) => {\n    let now = new Date();\n    let month = `${now.getMonth() + 1}`;\n    if (month.length === 1) {\n      month = `0${month}`;\n    }\n    let date = `${now.getDate()}`;\n    if (date.length === 1) {\n      date = `0${date}`;\n    }\n    let dateIso = `${now.getFullYear()}-${month}-${date}`;\n    if (current_block.questions.find((q) => q.id === q_id).value.length === 0) {\n      onTextChange(q_id, dateIso);\n    }\n    return dateIso;\n  };\n\n  const getAllQIds = () => {\n    let ids = [];\n    let retVal = '';\n    blocks.forEach((b) => {\n      b.questions.forEach((q) => {\n        ids.push(q.id);\n        retVal += q.id + ', ';\n      });\n    });\n    console.log(ids);\n    console.log(retVal);\n    return retVal;\n  };\n\n  return (\n    <Fragment>\n      <Modal basic open={cancelModalIsOpen}>\n        <Modal.Content>\n          <p>\n            Are you sure you'd like to abandon this survey and return to the\n            home page? All survey data will be lost\n          </p>\n        </Modal.Content>\n        <Modal.Actions>\n          <Link to='/'>\n            <Button color='red' inverted onClick={() => modalActions(true)}>\n              <Icon name='remove' /> Abandon\n            </Button>\n          </Link>\n          <Button color='green' inverted onClick={() => modalActions(false)}>\n            <Icon name='checkmark' /> Continue Survey\n          </Button>\n        </Modal.Actions>\n      </Modal>\n      <Progress percent={getProgress()} color={'blue'} progress active />\n      <Container\n        fluid\n        id='header'\n        style={{\n          backgroundColor: 'white',\n          padding: '2%',\n          paddingBottom: '1.5%',\n          borderRadius: '10px',\n        }}\n      >\n        {current_block.required && (\n          <Header size={'tiny'} color={'blue'} style={{ fontSize: '70%' }}>\n            {current_block.block_header}\n          </Header>\n        )}\n        {!current_block.required && (\n          <Header size={'tiny'} color={'orange'} style={{ fontSize: '70%' }}>\n            {current_block.block_header} (Optional)\n          </Header>\n        )}\n        <Container text fluid>\n          <p>{current_block.block_description}</p>\n        </Container>\n      </Container>\n      <Container\n        style={{ overflowX: 'auto', marginBottom: '6.5%', marginTop: '2%' }}\n      >\n        {questions.map(\n          (q) =>\n            q.enabled && (\n              <Container fluid key={q.id} className={'questionBlock'}>\n                <Grid divided stackable columns={2}>\n                  <Grid.Row>\n                    <Grid.Column textAlign={'left'} width={8}>\n                      <Container text fluid style={{ maxWidth: '30%' }}>\n                        <Header size={'tiny'}>{q.question_header}</Header>\n                        <p>{q.question_desc}</p>\n                        {q.img !== undefined &&\n                          q.img !== null &&\n                          q.img !== '' && <Image src={q.img} fluid />}\n                        {q.long_question_desc != null &&\n                          q.long_question_desc.length > 0 &&\n                          q.long_question_desc.map((desc) => (\n                            <p key={desc}>{desc}</p>\n                          ))}\n                      </Container>\n                    </Grid.Column>\n                    <Grid.Column width={8} textAlign={'right'}>\n                      <Container\n                        fluid\n                        style={{\n                          display: 'flex',\n                          flexFlow: 'wrap',\n                        }}\n                      >\n                        {(q.type === 'MC' || q.type === 'SATA') &&\n                          q.options.map((o) => (\n                            <Segment\n                              textAlign={'center'}\n                              inverted\n                              color={isSelected(q.value, o)}\n                              onClick={() =>\n                                blockAction(block_id, q.id, o.value)\n                              }\n                              key={o.value}\n                              style={{\n                                margin: '1%',\n                                fontSize: '1.1rem',\n                              }}\n                              className={'selectButtons'}\n                            >\n                              {o.value}\n                            </Segment>\n                          ))}\n                        {(q.type === 'DDS' || q.type === 'DDM') && (\n                          <Container key={q.id}>\n                            <Dropdown\n                              fluid\n                              multiple={q.type === 'DDM'}\n                              selection\n                              clearable\n                              defaultValue={getDefaultValue(q.type, q.value)}\n                              options={getOptions(q.options)}\n                              onChange={(e, s) => dropdownChange(e, s, q.id)}\n                              style={{ fontSize: '1rem' }}\n                            />\n                          </Container>\n                        )}\n                        {q.type === 'FR' && (\n                          <Container key={q.id}>\n                            <input\n                              name={q.value}\n                              defaultValue={q.value}\n                              type={q.fr_type}\n                              onChange={(val) =>\n                                onTextChange(q.id, val.target.value)\n                              }\n                              className={'inputField'}\n                            ></input>\n                          </Container>\n                        )}\n                      </Container>\n                    </Grid.Column>\n                  </Grid.Row>\n                </Grid>\n              </Container>\n            )\n        )}\n      </Container>\n      <Container\n        className={'bottomButtons'}\n        style={{ position: 'absolute', bottom: '3.6%' }}\n      >\n        <Grid container>\n          <Grid.Row columns={'4'}>\n            <Grid.Column floated='left'>\n              {previousVisible() && (\n                <Segment\n                  style={{ margin: '2%' }}\n                  inverted\n                  color={'blue'}\n                  onClick={() => prevBlockAction()}\n                  className={'buttonSegEnabled'}\n                >\n                  Previous\n                </Segment>\n              )}\n            </Grid.Column>\n            <Grid.Column floated='left'>\n              <Segment\n                style={{ margin: '2%' }}\n                inverted\n                color={'red'}\n                onClick={() => modalActions(false)}\n                className={'buttonSegEnabled'}\n              >\n                Cancel\n              </Segment>\n            </Grid.Column>\n            <Grid.Column>\n              {reviewEnabled() && (\n                <Link to='/review'>\n                  <Segment\n                    style={{ margin: '2%' }}\n                    inverted\n                    color={'green'}\n                    className={'buttonSegEnabled'}\n                  >\n                    Review\n                  </Segment>\n                </Link>\n              )}\n            </Grid.Column>\n            <Grid.Column floated='right'>\n              {nextVisible() && (\n                <Segment\n                  style={{ margin: '2%' }}\n                  inverted\n                  color={'blue'}\n                  onClick={() => nextBlockActionLocal()}\n                  disabled={nextDisabledVar}\n                  className={\n                    nextDisabledVar ? 'buttonSegDisabled' : 'buttonSegEnabled'\n                  }\n                >\n                  Next\n                </Segment>\n              )}\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n      </Container>\n    </Fragment>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    // questions: state.blocks.questions,\n    ping: state.blocks.ping,\n\n    block_id: state.blocks.current,\n    blocks: state.blocks.blocks,\n    blocks_seen: state.blocks.blocks_seen,\n\n    cancelModalIsOpen: state.state.cancelModalIsOpen,\n  };\n};\n\nexport default connect(mapStateToProps, {\n  blockAction,\n  dropDownSelect,\n  updateFRAction,\n  nextBlockAction,\n  prevBlockAction,\n  modalActions,\n})(QuestionBlock);\n","/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/reducers/index.js",[],"/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/images/logo.js",[],["91","92"],"/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/actions/blockActions.js",[],["93","94"],"/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/actions/stateActions.js",[],"/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/components/ReviewBlock.js",[],["95","96"],"/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/reducers/blockReducer.js",[],"/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/App.js",[],["97","98"],"/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/components/ExportPage.js",[],"/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/reducers/exportReducer.js",[],"/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/actions/exportActions.js",[],"/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/components/ExportModal.js",[],["99","100"],"/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/components/ExportModalContent.js",[],{"ruleId":"101","replacedBy":"102"},{"ruleId":"103","replacedBy":"104"},{"ruleId":"101","replacedBy":"105"},{"ruleId":"103","replacedBy":"106"},{"ruleId":"101","replacedBy":"107"},{"ruleId":"103","replacedBy":"108"},{"ruleId":"109","severity":1,"message":"110","line":170,"column":9,"nodeType":"111","messageId":"112","endLine":170,"endColumn":22},{"ruleId":"109","severity":1,"message":"113","line":187,"column":9,"nodeType":"111","messageId":"112","endLine":187,"endColumn":19},{"ruleId":"101","replacedBy":"114"},{"ruleId":"103","replacedBy":"115"},{"ruleId":"101","replacedBy":"116"},{"ruleId":"103","replacedBy":"117"},{"ruleId":"101","replacedBy":"118"},{"ruleId":"103","replacedBy":"119"},{"ruleId":"101","replacedBy":"120"},{"ruleId":"103","replacedBy":"121"},{"ruleId":"101","replacedBy":"122"},{"ruleId":"103","replacedBy":"123"},"no-native-reassign",["124"],"no-negated-in-lhs",["125"],["124"],["125"],["124"],["125"],"no-unused-vars","'setTodaysDate' is assigned a value but never used.","Identifier","unusedVar","'getAllQIds' is assigned a value but never used.",["124"],["125"],["124"],["125"],["124"],["125"],["124"],["125"],["124"],["125"],"no-global-assign","no-unsafe-negation"]